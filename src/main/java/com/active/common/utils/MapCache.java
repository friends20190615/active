package com.active.common.utils;import com.active.common.init.SpringInit;import com.active.front.service.VisitService;import com.google.common.util.concurrent.AtomicLongMap;import java.util.HashMap;import java.util.Map;/** * map 缓存 * * @author ta * @date 2019/7/4 下午11:44 * @since 1.0 */public class MapCache {    private static AtomicLongMap<String> map = AtomicLongMap.create();    public static Map<String,Integer> limitMap = new HashMap<String, Integer>();    static {        limitMap.put("12日下午",30);        limitMap.put("13日上午",50);        limitMap.put("13日下午",30);        limitMap.put("14日上午",10);        limitMap.put("20",20);        limitMap.put("21",20);    }    public synchronized static AtomicLongMap<String> instance(String time,int state){       return getData(time,state);    }    private static AtomicLongMap<String> getData(String time,int state){        if(map.get(time) == 0){            VisitService visitService = (VisitService) SpringInit.getApplicationContext().getBean("visitService");            if(state == 2 && ("20".equals(time) || "21".equals(time))){                Integer count1 = visitService.getCountByTime(time+"日上午",state);                Integer count2 = visitService.getCountByTime(time+"日下午",state);                Integer count = count1+count2;                map.addAndGet(time,count);            }else{                Integer count = visitService.getCountByTime(time,state);                map.addAndGet(time,count);            }        }        return map;    }}